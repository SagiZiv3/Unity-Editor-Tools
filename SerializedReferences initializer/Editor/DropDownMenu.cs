using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using EditorTools.SerializedReferenceInitializer.Attributes;
using UnityEditor;
using UnityEditor.IMGUI.Controls;
using UnityEngine;

namespace EditorTools.SerializedReferenceInitializer.Editor
{
    internal sealed class DropDownMenu : AdvancedDropdown
    {
        private readonly Type[] types;
        private readonly string header;
        private readonly Component referenceObject;
        private readonly Action<object> onInstanceCreated;

        public DropDownMenu(AdvancedDropdownState state, IEnumerable<Type> typesToShow, string menuHeader,
            Component referenceObject, Action<object> onInstanceCreated) : base(state)
        {
            types = TypeUtils.Sorted(typesToShow).ToArray();
            header = menuHeader;
            this.referenceObject = referenceObject;
            this.onInstanceCreated = onInstanceCreated;
            minimumSize = new Vector2(minimumSize.x, EditorGUIUtility.singleLineHeight * 20);
        }

        protected override AdvancedDropdownItem BuildRoot()
        {
            var root = new AdvancedDropdownItem(header);
            var itemsGenerator = new MenuItemsGenerator();
            root.AddChild(new NullMenuItem("Clear reference"){icon = EditorIcons.Delete});
            root.AddSeparator();
            foreach (Type type in types)
            {
                var autoGenerated = type.GetCustomAttribute<AutoGeneratedWrapperAttribute>();
                TypeDisplayInfo typeDisplayInfo = TypeUtils.GetTypeDisplayInfo(autoGenerated?.WrappedType ?? type);
                AdvancedDropdownItem directParent = itemsGenerator.CreateParents(typeDisplayInfo.path, root);
                AdvancedDropdownItem menuItem;
                if (autoGenerated == null)
                {
                    menuItem = MenuItemsGenerator.CreateMenuItemForClass(typeDisplayInfo.displayName, type);
                }
                else
                {
                    menuItem = MenuItemsGenerator.CreateMenuItemForObject(
                        typeDisplayInfo.displayName, type,
                        autoGenerated.WrappedType, referenceObject);
                }

                if (menuItem != null)
                    directParent.AddChild(menuItem);
            }

            return root;
        }

        protected override void ItemSelected(AdvancedDropdownItem item)
        {
            if (item is ObjectCreationMenuItem objectCreationMenuItem)
                onInstanceCreated?.Invoke(objectCreationMenuItem.CreateInstance());
            if (item is NullMenuItem)
                onInstanceCreated?.Invoke(null);
        }

        private sealed class NullMenuItem : AdvancedDropdownItem
        {
            public NullMenuItem(string name) : base(name)
            {
            }
        }
    }
}